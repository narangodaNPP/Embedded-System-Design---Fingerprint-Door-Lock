
door_lock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  00000368  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115b  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c96  00000000  00000000  00001583  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054d  00000000  00000000  00002219  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00002768  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e7  00000000  00000000  000027fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000306  00000000  00000000  00002de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000030e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	35 c1       	rjmp	.+618    	; 0x2d0 <__vector_25>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a1 30       	cpi	r26, 0x01	; 1
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	9c d0       	rcall	.+312    	; 0x23e <main>
 106:	f4 c0       	rjmp	.+488    	; 0x2f0 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <initHardware>:
    }
}

/*input & output pins*/
void initHardware() {
	DDRC |= 0B00000010;
 10a:	87 b1       	in	r24, 0x07	; 7
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	87 b9       	out	0x07, r24	; 7
	DDRA |= 0B11111111; //outputs for data pins(8,7,6,5) and control pins(3,2,1)
 110:	81 b1       	in	r24, 0x01	; 1
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	81 b9       	out	0x01, r24	; 1
 116:	08 95       	ret

00000118 <Lcd_CmdWrite>:
}

void Lcd_CmdWrite(char cmd){
	
	PORTA = (cmd & 0xF0); //Set upper 4 bits of the cmd
 118:	98 2f       	mov	r25, r24
 11a:	90 7f       	andi	r25, 0xF0	; 240
 11c:	92 b9       	out	0x02, r25	; 2
	PORTA &= ~(1<<0); //Set RS pin to LOW
 11e:	92 b1       	in	r25, 0x02	; 2
 120:	9e 7f       	andi	r25, 0xFE	; 254
 122:	92 b9       	out	0x02, r25	; 2
	PORTA &= ~(1<<1); //Set RW pin to LOW
 124:	92 b1       	in	r25, 0x02	; 2
 126:	9d 7f       	andi	r25, 0xFD	; 253
 128:	92 b9       	out	0x02, r25	; 2
	PORTA |= (1<<2); //Generate High-to-Low pulse
 12a:	92 b1       	in	r25, 0x02	; 2
 12c:	94 60       	ori	r25, 0x04	; 4
 12e:	92 b9       	out	0x02, r25	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	ef e3       	ldi	r30, 0x3F	; 63
 132:	fc e9       	ldi	r31, 0x9C	; 156
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <Lcd_CmdWrite+0x1c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <Lcd_CmdWrite+0x22>
 13a:	00 00       	nop
	_delay_ms(10);
	PORTA &= ~(1<<2);
 13c:	92 b1       	in	r25, 0x02	; 2
 13e:	9b 7f       	andi	r25, 0xFB	; 251
 140:	92 b9       	out	0x02, r25	; 2
 142:	ef e3       	ldi	r30, 0x3F	; 63
 144:	fc e9       	ldi	r31, 0x9C	; 156
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <Lcd_CmdWrite+0x2e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <Lcd_CmdWrite+0x34>
 14c:	00 00       	nop
	_delay_ms(10);
	PORTA = ((cmd<<4) & 0xF0);	//Set lower 4 bits of the cmd
 14e:	f0 e1       	ldi	r31, 0x10	; 16
 150:	8f 9f       	mul	r24, r31
 152:	c0 01       	movw	r24, r0
 154:	11 24       	eor	r1, r1
 156:	82 b9       	out	0x02, r24	; 2
	PORTA &= ~(1<<0); //Set RS pin to LOW
 158:	82 b1       	in	r24, 0x02	; 2
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	82 b9       	out	0x02, r24	; 2
	PORTA &= ~(1<<1); //Set RW pin to LOW
 15e:	82 b1       	in	r24, 0x02	; 2
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	82 b9       	out	0x02, r24	; 2
	PORTA |= (1<<2); //Generate High-to-Low pulse
 164:	82 b1       	in	r24, 0x02	; 2
 166:	84 60       	ori	r24, 0x04	; 4
 168:	82 b9       	out	0x02, r24	; 2
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	9c e9       	ldi	r25, 0x9C	; 156
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <Lcd_CmdWrite+0x56>
 172:	00 c0       	rjmp	.+0      	; 0x174 <Lcd_CmdWrite+0x5c>
 174:	00 00       	nop
	_delay_ms(10);
	PORTA &= ~(1<<2);
 176:	82 b1       	in	r24, 0x02	; 2
 178:	8b 7f       	andi	r24, 0xFB	; 251
 17a:	82 b9       	out	0x02, r24	; 2
 17c:	ef e3       	ldi	r30, 0x3F	; 63
 17e:	fc e9       	ldi	r31, 0x9C	; 156
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <Lcd_CmdWrite+0x68>
 184:	00 c0       	rjmp	.+0      	; 0x186 <Lcd_CmdWrite+0x6e>
 186:	00 00       	nop
 188:	08 95       	ret

0000018a <Lcd_DataWrite>:
}


void Lcd_DataWrite(char data)
{
	PORTA = (data & 0xF0);	//Set upper 4 bits of the data
 18a:	98 2f       	mov	r25, r24
 18c:	90 7f       	andi	r25, 0xF0	; 240
 18e:	92 b9       	out	0x02, r25	; 2
	PORTA |= (1<<0); //Set RS pin to High
 190:	92 b1       	in	r25, 0x02	; 2
 192:	91 60       	ori	r25, 0x01	; 1
 194:	92 b9       	out	0x02, r25	; 2
	PORTA &= ~(1<<1); //Set RW pin to LOW
 196:	92 b1       	in	r25, 0x02	; 2
 198:	9d 7f       	andi	r25, 0xFD	; 253
 19a:	92 b9       	out	0x02, r25	; 2
	PORTA |= (1<<2); //Generate High-to-Low pulse
 19c:	92 b1       	in	r25, 0x02	; 2
 19e:	94 60       	ori	r25, 0x04	; 4
 1a0:	92 b9       	out	0x02, r25	; 2
 1a2:	ef e3       	ldi	r30, 0x3F	; 63
 1a4:	fc e9       	ldi	r31, 0x9C	; 156
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <Lcd_DataWrite+0x1c>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <Lcd_DataWrite+0x22>
 1ac:	00 00       	nop
	_delay_ms(10);
	PORTA &= ~(1<<2);
 1ae:	92 b1       	in	r25, 0x02	; 2
 1b0:	9b 7f       	andi	r25, 0xFB	; 251
 1b2:	92 b9       	out	0x02, r25	; 2
 1b4:	ef e3       	ldi	r30, 0x3F	; 63
 1b6:	fc e9       	ldi	r31, 0x9C	; 156
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <Lcd_DataWrite+0x2e>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <Lcd_DataWrite+0x34>
 1be:	00 00       	nop
	_delay_ms(10);
	PORTA = ((data<<4) & 0xF0); //Set lower 4 bits of the data
 1c0:	f0 e1       	ldi	r31, 0x10	; 16
 1c2:	8f 9f       	mul	r24, r31
 1c4:	c0 01       	movw	r24, r0
 1c6:	11 24       	eor	r1, r1
 1c8:	82 b9       	out	0x02, r24	; 2
	PORTA |= (1<<0); //Set RS pin to HIGH
 1ca:	82 b1       	in	r24, 0x02	; 2
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	82 b9       	out	0x02, r24	; 2
	PORTA &= ~(1<<1); //Set RW pin to LOW
 1d0:	82 b1       	in	r24, 0x02	; 2
 1d2:	8d 7f       	andi	r24, 0xFD	; 253
 1d4:	82 b9       	out	0x02, r24	; 2
	PORTA |= (1<<2); //Generate High-to-Low pulse
 1d6:	82 b1       	in	r24, 0x02	; 2
 1d8:	84 60       	ori	r24, 0x04	; 4
 1da:	82 b9       	out	0x02, r24	; 2
 1dc:	8f e3       	ldi	r24, 0x3F	; 63
 1de:	9c e9       	ldi	r25, 0x9C	; 156
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <Lcd_DataWrite+0x56>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <Lcd_DataWrite+0x5c>
 1e6:	00 00       	nop
	_delay_ms(10);
	PORTA &= ~(1<<2);
 1e8:	82 b1       	in	r24, 0x02	; 2
 1ea:	8b 7f       	andi	r24, 0xFB	; 251
 1ec:	82 b9       	out	0x02, r24	; 2
 1ee:	ef e3       	ldi	r30, 0x3F	; 63
 1f0:	fc e9       	ldi	r31, 0x9C	; 156
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <Lcd_DataWrite+0x68>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <Lcd_DataWrite+0x6e>
 1f8:	00 00       	nop
 1fa:	08 95       	ret

000001fc <Lcd_init>:
	_delay_ms(10);
}

void Lcd_init(void){
	//Initialize LCD in 4-bit
	Lcd_CmdWrite(0x02);
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	8c df       	rcall	.-232    	; 0x118 <Lcd_CmdWrite>
	
	//Enable 5x7 mode for char
	Lcd_CmdWrite(0x28);
 200:	88 e2       	ldi	r24, 0x28	; 40
 202:	8a df       	rcall	.-236    	; 0x118 <Lcd_CmdWrite>
	
	//Display on cursor blinking
	Lcd_CmdWrite(0x0E);
 204:	8e e0       	ldi	r24, 0x0E	; 14
 206:	88 df       	rcall	.-240    	; 0x118 <Lcd_CmdWrite>
	
	//Clear Display
	Lcd_CmdWrite(0x01);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	86 df       	rcall	.-244    	; 0x118 <Lcd_CmdWrite>
	
	//Force Cursor to beginning
	Lcd_CmdWrite(0x80);
 20c:	80 e8       	ldi	r24, 0x80	; 128
 20e:	84 cf       	rjmp	.-248    	; 0x118 <Lcd_CmdWrite>
 210:	08 95       	ret

00000212 <initUSART>:
 212:	e1 ec       	ldi	r30, 0xC1	; 193
}

/*initialize uart*/
void initUSART(){
	UCSR0B |= (1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0); // tx enable, rx enable and rx complete interrupt enable
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	88 69       	ori	r24, 0x98	; 152
 21a:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ00)|(1<<UCSZ01); // 8 bit 
 21c:	e2 ec       	ldi	r30, 0xC2	; 194
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	86 60       	ori	r24, 0x06	; 6
 224:	80 83       	st	Z, r24
	UCSR0A |= (1<<U2X0); // 
 226:	e0 ec       	ldi	r30, 0xC0	; 192
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	80 83       	st	Z, r24
	UBRR0H = (unsigned char)(UBRR_VALUE>>8); // UBRR0H = 0
 230:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)(UBRR_VALUE);	// UBRR0L = 207
 234:	8f ec       	ldi	r24, 0xCF	; 207
 236:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	sei(); //globally enable interrupt
 23a:	78 94       	sei
 23c:	08 95       	ret

0000023e <main>:
void Lcd_CmdWrite(char cmd);
void Lcd_init(void);

int main(void)
{
	initHardware();
 23e:	65 df       	rcall	.-310    	; 0x10a <initHardware>
	initUSART();
 240:	e8 df       	rcall	.-48     	; 0x212 <initUSART>
	Lcd_init();
 242:	dc df       	rcall	.-72     	; 0x1fc <Lcd_init>
 244:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	
    while (1) {
		if (rxData == '1') { 
 248:	81 33       	cpi	r24, 0x31	; 49
 24a:	01 f5       	brne	.+64     	; 0x28c <main+0x4e>
 24c:	82 e0       	ldi	r24, 0x02	; 2
			PORTC = 0B00000010;
 24e:	88 b9       	out	0x08, r24	; 8
			Lcd_DataWrite('W');
 250:	87 e5       	ldi	r24, 0x57	; 87
 252:	9b df       	rcall	.-202    	; 0x18a <Lcd_DataWrite>
			Lcd_DataWrite('E');
 254:	85 e4       	ldi	r24, 0x45	; 69
 256:	99 df       	rcall	.-206    	; 0x18a <Lcd_DataWrite>
			Lcd_DataWrite('L');
 258:	8c e4       	ldi	r24, 0x4C	; 76
 25a:	97 df       	rcall	.-210    	; 0x18a <Lcd_DataWrite>
			Lcd_DataWrite('L');
 25c:	8c e4       	ldi	r24, 0x4C	; 76
 25e:	95 df       	rcall	.-214    	; 0x18a <Lcd_DataWrite>
			Lcd_DataWrite('C');
 260:	83 e4       	ldi	r24, 0x43	; 67
 262:	93 df       	rcall	.-218    	; 0x18a <Lcd_DataWrite>
			Lcd_DataWrite('O');
 264:	8f e4       	ldi	r24, 0x4F	; 79
 266:	91 df       	rcall	.-222    	; 0x18a <Lcd_DataWrite>
 268:	8d e4       	ldi	r24, 0x4D	; 77
			Lcd_DataWrite('M');
 26a:	8f df       	rcall	.-226    	; 0x18a <Lcd_DataWrite>
 26c:	85 e4       	ldi	r24, 0x45	; 69
 26e:	8d df       	rcall	.-230    	; 0x18a <Lcd_DataWrite>
			Lcd_DataWrite('E');			
 270:	2f ef       	ldi	r18, 0xFF	; 255
 272:	83 ed       	ldi	r24, 0xD3	; 211
 274:	90 e3       	ldi	r25, 0x30	; 48
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x38>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x42>
 280:	00 00       	nop
 282:	80 e3       	ldi	r24, 0x30	; 48
 284:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			_delay_ms(1000);
			rxData = '0';
 288:	88 b1       	in	r24, 0x08	; 8
 28a:	18 b8       	out	0x08, r1	; 8
			PORTC &= 0B00000000;
 28c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
			 
		}
		if (rxData == '2') {
 290:	82 33       	cpi	r24, 0x32	; 50
			PORTC &= 0B00000000;
 292:	c1 f6       	brne	.-80     	; 0x244 <main+0x6>
			Lcd_CmdWrite(0x01);
 294:	88 b1       	in	r24, 0x08	; 8
 296:	18 b8       	out	0x08, r1	; 8
			Lcd_CmdWrite(0x01);
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	3e df       	rcall	.-388    	; 0x118 <Lcd_CmdWrite>
			Lcd_DataWrite('T');
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	3c df       	rcall	.-392    	; 0x118 <Lcd_CmdWrite>
			Lcd_DataWrite('R');
 2a0:	84 e5       	ldi	r24, 0x54	; 84
 2a2:	73 df       	rcall	.-282    	; 0x18a <Lcd_DataWrite>
			Lcd_DataWrite('Y');
 2a4:	82 e5       	ldi	r24, 0x52	; 82
 2a6:	71 df       	rcall	.-286    	; 0x18a <Lcd_DataWrite>
			Lcd_DataWrite(' ');
 2a8:	89 e5       	ldi	r24, 0x59	; 89
 2aa:	6f df       	rcall	.-290    	; 0x18a <Lcd_DataWrite>
 2ac:	80 e2       	ldi	r24, 0x20	; 32
			Lcd_DataWrite('A');
 2ae:	6d df       	rcall	.-294    	; 0x18a <Lcd_DataWrite>
 2b0:	81 e4       	ldi	r24, 0x41	; 65
 2b2:	6b df       	rcall	.-298    	; 0x18a <Lcd_DataWrite>
			Lcd_DataWrite('G');
 2b4:	87 e4       	ldi	r24, 0x47	; 71
 2b6:	69 df       	rcall	.-302    	; 0x18a <Lcd_DataWrite>
 2b8:	81 e4       	ldi	r24, 0x41	; 65
			Lcd_DataWrite('A');
 2ba:	67 df       	rcall	.-306    	; 0x18a <Lcd_DataWrite>
 2bc:	89 e4       	ldi	r24, 0x49	; 73
 2be:	65 df       	rcall	.-310    	; 0x18a <Lcd_DataWrite>
			Lcd_DataWrite('I');
 2c0:	8e e4       	ldi	r24, 0x4E	; 78
 2c2:	63 df       	rcall	.-314    	; 0x18a <Lcd_DataWrite>
 2c4:	81 e0       	ldi	r24, 0x01	; 1
			Lcd_DataWrite('N');
 2c6:	28 df       	rcall	.-432    	; 0x118 <Lcd_CmdWrite>
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			Lcd_CmdWrite(0x01);
 2ce:	ba cf       	rjmp	.-140    	; 0x244 <main+0x6>

000002d0 <__vector_25>:
 2d0:	1f 92       	push	r1
			rxData = '0';
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
	UBRR0L = (unsigned char)(UBRR_VALUE);	// UBRR0L = 207
	
	sei(); //globally enable interrupt
}

ISR (USART0_RX_vect) {
 2da:	8f 93       	push	r24
	rxData = UDR0;
 2dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 2e0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
} 
 2e4:	8f 91       	pop	r24
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
